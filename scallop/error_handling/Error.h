/*	This file Error.h is part of scallop.
 *
 *  scallop is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  scallop is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with scallop.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Created on: Nov 14, 2014
 *      Author: Andreas Linscheid
 */

#include <string>
#include <typeinfo>
#include <sstream>
#include <iostream>

#ifndef SCALLOP_ERROR_HANDLING_ERROR_H_
#define SCALLOP_ERROR_HANDLING_ERROR_H_

namespace scallop {
namespace error_handling {

#ifndef NDEBUG
#   define ASSERT(condition, message) \
    do { \
        if (! (condition)) { \
            std::cerr << "Assertion `" #condition "` failed in " << __FILE__ \
                      << " line " << __LINE__ << ": " << message << std::endl; \
            std::terminate(); \
        } \
    } while (false)
#else
#   define ASSERT(condition, message) do { } while (false)
#endif

/**
 *	\brief Manage the errors that may be generated by the code.
 */
class Error {
public:

	/**
	 * \brief Constructor that does not call an error.
	 */
	Error();

	/**
	 * \brief Call an error directly with given information.
	 *
	 * @param errorCode		Code describing of what went wrong. Zero means no error.
	 */
	Error(int errorCode);

	/**
	 * \brief Call an error directly with given information.
	 *
	 * @param description	Error description of what went wrong.	 */
	Error(std::string const& description);

	/**
	 * \brief Call an error directly with given information.
	 *
	 * @param description	Error description of what went wrong.
	 * @param errorCode		Code describing of what went wrong. Zero means no error.
	 */
	Error(std::string const& description,int errorCode);

	/**
	 *	\brief Call an error directly with given information.
	 *
	 * @param line			Line of the code where the error occurred.
	 * @param file			Source file where the error occurred.
	 * @param description	Error description of what went wrong.
	 * @param errorCode		Code describing of what went wrong. Zero means no error.
	 */
	Error(int line,std::string const& file,std::string const& description,size_t errorCode);

	/**
	 * \brief In debug mode install a signal handler on a segmentation fault causing a stack trace to be generated.
	 */
	static void generate_stacktrace_on_segfault();
private:
	//generate a stack trace for debugging. Works with glibc, though may not be portable.
	void handler (int signal);

	//call error including the line and the file where the error was called from
	void call_error_with_code_ref(int line,std::string const& file,std::string const& description,int errorCode);

	//call error with no reference to where the error occurred.
	void call_error_no_ref(std::string const& description,int errorCode);
};

} /* namespace error_handling */
} /* namespace scallop */
#endif /* SCALLOP_ERROR_HANDLING_ERROR_H_ */
